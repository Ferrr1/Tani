// supabase/functions/verify-mother-name/index.ts
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  "Access-Control-Allow-Methods": "POST, OPTIONS"
};
const json = (body, status = 200)=>new Response(JSON.stringify(body), {
    status,
    headers: {
      ...corsHeaders,
      "content-type": "application/json"
    }
  });
serve(async (req)=>{
  // Preflight CORS
  if (req.method === "OPTIONS") return new Response("ok", {
    headers: corsHeaders
  });
  try {
    if (req.method !== "POST") return json({
      error: "Method Not Allowed"
    }, 405);
    const { email, answer, redirectTo } = await req.json().catch(()=>({}));
    if (!email || !answer) return json({
      error: "email & answer required"
    }, 400);
    const supabaseUrl = Deno.env.get("SUPABASE_URL");
    const serviceRoleKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
    if (!supabaseUrl || !serviceRoleKey) {
      return json({
        error: "Missing env SUPABASE_URL / SUPABASE_SERVICE_ROLE_KEY"
      }, 500);
    }
    // Admin client (Service Role)
    const admin = createClient(supabaseUrl, serviceRoleKey, {
      auth: {
        persistSession: false
      },
      global: {
        headers: {
          "x-verify-mother-name": "1"
        }
      }
    });
    // 1) Verifikasi jawaban "nama ibu" via RPC (hasil boolean)
    const { data: ok, error: vErr } = await admin.rpc("verify_mother_name_by_email", {
      p_email: String(email),
      p_answer: String(answer)
    });
    if (vErr) {
      console.error("verify_mother_name_by_email error:", vErr);
      return json({
        error: "verification_failed"
      }, 500);
    }
    if (!ok) {
      // Respons generik; tidak membocorkan apakah email ada / salah
      return json({
        ok: false
      }, 200);
    }
    // 2) Buat tautan/OTP pemulihan
    const wantRedirect = typeof redirectTo === "string" && redirectTo.trim().length > 0 ? redirectTo.trim() : undefined;
    // Percobaan #1: dengan redirectTo (jika diberikan)
    const first = await admin.auth.admin.generateLink({
      type: "recovery",
      email: String(email),
      options: wantRedirect ? {
        redirectTo: wantRedirect
      } : undefined
    });
    if (first.error) console.error("generateLink first error:", first.error);
    // Ekstrak semua kemungkinan keluaran dari respons
    const props1 = first.data?.properties ?? first.data ?? {};
    const actionLink1 = first.data?.action_link ?? props1?.action_link ?? null;
    const tokenHash1 = props1?.hashed_token ?? props1?.token_hash ?? null;
    const emailOtp1 = props1?.email_otp ?? null;
    if (actionLink1 || tokenHash1 || emailOtp1) {
      return json({
        ok: true,
        action_link: actionLink1 ?? null,
        token_hash: tokenHash1 ?? null,
        email_otp: emailOtp1 ?? null
      }, 200);
    }
    // Percobaan #2: tanpa redirectTo (pakai Site URL default project)
    const second = await admin.auth.admin.generateLink({
      type: "recovery",
      email: String(email)
    });
    if (second.error) console.error("generateLink second error:", second.error);
    if (!second.data) return json({
      error: "failed_to_generate_link"
    }, 500);
    const props2 = second.data?.properties ?? second.data ?? {};
    const actionLink2 = second.data?.action_link ?? props2?.action_link ?? null;
    const tokenHash2 = props2?.hashed_token ?? props2?.token_hash ?? null;
    const emailOtp2 = props2?.email_otp ?? null;
    if (!actionLink2 && !tokenHash2 && !emailOtp2) {
      console.error("generateLink returned no actionable fields");
      return json({
        error: "failed_to_generate_link"
      }, 500);
    }
    return json({
      ok: true,
      action_link: actionLink2 ?? null,
      token_hash: tokenHash2 ?? null,
      email_otp: emailOtp2 ?? null
    }, 200);
  } catch (e) {
    console.error(e);
    return json({
      error: "internal_error"
    }, 500);
  }
});
